// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chaotic_good_frame.proto

#include "chaotic_good_frame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chaotic_good_frame {
PROTOBUF_CONSTEXPR Settings::Settings(
    ::_pbi::ConstantInitialized)
  : connection_id_()
  , supported_features_()
  , _supported_features_cached_byte_size_(0)
  , data_channel_(false)
  , alignment_(0u)
  , max_chunk_size_(0u){}
struct SettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsDefaultTypeInternal() {}
  union {
    Settings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsDefaultTypeInternal _Settings_default_instance_;
PROTOBUF_CONSTEXPR UnknownMetadata::UnknownMetadata(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct UnknownMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownMetadataDefaultTypeInternal() {}
  union {
    UnknownMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownMetadataDefaultTypeInternal _UnknownMetadata_default_instance_;
PROTOBUF_CONSTEXPR ClientMetadata::ClientMetadata(
    ::_pbi::ConstantInitialized)
  : unknown_metadata_()
  , path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , authority_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timeout_ms_(uint64_t{0u}){}
struct ClientMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMetadataDefaultTypeInternal() {}
  union {
    ClientMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMetadataDefaultTypeInternal _ClientMetadata_default_instance_;
PROTOBUF_CONSTEXPR ServerMetadata::ServerMetadata(
    ::_pbi::ConstantInitialized)
  : unknown_metadata_()
  , message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0u){}
struct ServerMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMetadataDefaultTypeInternal() {}
  union {
    ServerMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMetadataDefaultTypeInternal _ServerMetadata_default_instance_;
PROTOBUF_CONSTEXPR BeginMessage::BeginMessage(
    ::_pbi::ConstantInitialized)
  : length_(uint64_t{0u}){}
struct BeginMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BeginMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BeginMessageDefaultTypeInternal() {}
  union {
    BeginMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BeginMessageDefaultTypeInternal _BeginMessage_default_instance_;
}  // namespace chaotic_good_frame
static ::_pb::Metadata file_level_metadata_chaotic_5fgood_5fframe_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chaotic_5fgood_5fframe_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chaotic_5fgood_5fframe_2eproto = nullptr;

const uint32_t TableStruct_chaotic_5fgood_5fframe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::Settings, connection_id_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::Settings, data_channel_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::Settings, alignment_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::Settings, max_chunk_size_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::Settings, supported_features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::UnknownMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::UnknownMetadata, key_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::UnknownMetadata, value_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ClientMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ClientMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ClientMetadata, path_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ClientMetadata, authority_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ClientMetadata, timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ClientMetadata, unknown_metadata_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ServerMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ServerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ServerMetadata, status_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ServerMetadata, message_),
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::ServerMetadata, unknown_metadata_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::BeginMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chaotic_good_frame::BeginMessage, length_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::chaotic_good_frame::Settings)},
  { 11, -1, -1, sizeof(::chaotic_good_frame::UnknownMetadata)},
  { 19, 29, -1, sizeof(::chaotic_good_frame::ClientMetadata)},
  { 33, 42, -1, sizeof(::chaotic_good_frame::ServerMetadata)},
  { 45, -1, -1, sizeof(::chaotic_good_frame::BeginMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::chaotic_good_frame::_Settings_default_instance_._instance,
  &::chaotic_good_frame::_UnknownMetadata_default_instance_._instance,
  &::chaotic_good_frame::_ClientMetadata_default_instance_._instance,
  &::chaotic_good_frame::_ServerMetadata_default_instance_._instance,
  &::chaotic_good_frame::_BeginMessage_default_instance_._instance,
};

const char descriptor_table_protodef_chaotic_5fgood_5fframe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030chaotic_good_frame.proto\022\022chaotic_good"
  "_frame\"\320\001\n\010Settings\022\025\n\rconnection_id\030\001 \003"
  "(\014\022\024\n\014data_channel\030\002 \001(\010\022\021\n\talignment\030\003 "
  "\001(\r\022\026\n\016max_chunk_size\030\004 \001(\r\022A\n\022supported"
  "_features\030\005 \003(\0162%.chaotic_good_frame.Set"
  "tings.Features\")\n\010Features\022\017\n\013UNSPECIFIE"
  "D\020\000\022\014\n\010CHUNKING\020\001\"-\n\017UnknownMetadata\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"\271\001\n\016ClientMetad"
  "ata\022\021\n\004path\030\001 \001(\tH\000\210\001\001\022\026\n\tauthority\030\002 \001("
  "\tH\001\210\001\001\022\027\n\ntimeout_ms\030\003 \001(\004H\002\210\001\001\022=\n\020unkno"
  "wn_metadata\030d \003(\0132#.chaotic_good_frame.U"
  "nknownMetadataB\007\n\005_pathB\014\n\n_authorityB\r\n"
  "\013_timeout_ms\"\221\001\n\016ServerMetadata\022\023\n\006statu"
  "s\030\001 \001(\rH\000\210\001\001\022\024\n\007message\030\002 \001(\014H\001\210\001\001\022=\n\020un"
  "known_metadata\030d \003(\0132#.chaotic_good_fram"
  "e.UnknownMetadataB\t\n\007_statusB\n\n\010_message"
  "\"\036\n\014BeginMessage\022\016\n\006length\030\001 \001(\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chaotic_5fgood_5fframe_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chaotic_5fgood_5fframe_2eproto = {
    false, false, 680, descriptor_table_protodef_chaotic_5fgood_5fframe_2eproto,
    "chaotic_good_frame.proto",
    &descriptor_table_chaotic_5fgood_5fframe_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_chaotic_5fgood_5fframe_2eproto::offsets,
    file_level_metadata_chaotic_5fgood_5fframe_2eproto, file_level_enum_descriptors_chaotic_5fgood_5fframe_2eproto,
    file_level_service_descriptors_chaotic_5fgood_5fframe_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chaotic_5fgood_5fframe_2eproto_getter() {
  return &descriptor_table_chaotic_5fgood_5fframe_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chaotic_5fgood_5fframe_2eproto(&descriptor_table_chaotic_5fgood_5fframe_2eproto);
namespace chaotic_good_frame {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Settings_Features_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chaotic_5fgood_5fframe_2eproto);
  return file_level_enum_descriptors_chaotic_5fgood_5fframe_2eproto[0];
}
bool Settings_Features_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Settings_Features Settings::UNSPECIFIED;
constexpr Settings_Features Settings::CHUNKING;
constexpr Settings_Features Settings::Features_MIN;
constexpr Settings_Features Settings::Features_MAX;
constexpr int Settings::Features_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Settings::_Internal {
 public:
};

Settings::Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  connection_id_(arena),
  supported_features_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chaotic_good_frame.Settings)
}
Settings::Settings(const Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connection_id_(from.connection_id_),
      supported_features_(from.supported_features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_channel_, &from.data_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_chunk_size_) -
    reinterpret_cast<char*>(&data_channel_)) + sizeof(max_chunk_size_));
  // @@protoc_insertion_point(copy_constructor:chaotic_good_frame.Settings)
}

inline void Settings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_chunk_size_) -
    reinterpret_cast<char*>(&data_channel_)) + sizeof(max_chunk_size_));
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:chaotic_good_frame.Settings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:chaotic_good_frame.Settings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_id_.Clear();
  supported_features_.Clear();
  ::memset(&data_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_chunk_size_) -
      reinterpret_cast<char*>(&data_channel_)) + sizeof(max_chunk_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Settings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_connection_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool data_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          data_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 alignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_chunk_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_chunk_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .chaotic_good_frame.Settings.Features supported_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_supported_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_supported_features(static_cast<::chaotic_good_frame::Settings_Features>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Settings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chaotic_good_frame.Settings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes connection_id = 1;
  for (int i = 0, n = this->_internal_connection_id_size(); i < n; i++) {
    const auto& s = this->_internal_connection_id(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bool data_channel = 2;
  if (this->_internal_data_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_data_channel(), target);
  }

  // uint32 alignment = 3;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_alignment(), target);
  }

  // uint32 max_chunk_size = 4;
  if (this->_internal_max_chunk_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_chunk_size(), target);
  }

  // repeated .chaotic_good_frame.Settings.Features supported_features = 5;
  {
    int byte_size = _supported_features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, supported_features_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaotic_good_frame.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaotic_good_frame.Settings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes connection_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(connection_id_.size());
  for (int i = 0, n = connection_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      connection_id_.Get(i));
  }

  // repeated .chaotic_good_frame.Settings.Features supported_features = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_supported_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _supported_features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool data_channel = 2;
  if (this->_internal_data_channel() != 0) {
    total_size += 1 + 1;
  }

  // uint32 alignment = 3;
  if (this->_internal_alignment() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_alignment());
  }

  // uint32 max_chunk_size = 4;
  if (this->_internal_max_chunk_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_chunk_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Settings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Settings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Settings::GetClassData() const { return &_class_data_; }

void Settings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Settings *>(to)->MergeFrom(
      static_cast<const Settings &>(from));
}


void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaotic_good_frame.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  connection_id_.MergeFrom(from.connection_id_);
  supported_features_.MergeFrom(from.supported_features_);
  if (from._internal_data_channel() != 0) {
    _internal_set_data_channel(from._internal_data_channel());
  }
  if (from._internal_alignment() != 0) {
    _internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_max_chunk_size() != 0) {
    _internal_set_max_chunk_size(from._internal_max_chunk_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaotic_good_frame.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::InternalSwap(Settings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  connection_id_.InternalSwap(&other->connection_id_);
  supported_features_.InternalSwap(&other->supported_features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Settings, max_chunk_size_)
      + sizeof(Settings::max_chunk_size_)
      - PROTOBUF_FIELD_OFFSET(Settings, data_channel_)>(
          reinterpret_cast<char*>(&data_channel_),
          reinterpret_cast<char*>(&other->data_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Settings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chaotic_5fgood_5fframe_2eproto_getter, &descriptor_table_chaotic_5fgood_5fframe_2eproto_once,
      file_level_metadata_chaotic_5fgood_5fframe_2eproto[0]);
}

// ===================================================================

class UnknownMetadata::_Internal {
 public:
};

UnknownMetadata::UnknownMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chaotic_good_frame.UnknownMetadata)
}
UnknownMetadata::UnknownMetadata(const UnknownMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chaotic_good_frame.UnknownMetadata)
}

inline void UnknownMetadata::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnknownMetadata::~UnknownMetadata() {
  // @@protoc_insertion_point(destructor:chaotic_good_frame.UnknownMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void UnknownMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnknownMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:chaotic_good_frame.UnknownMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chaotic_good_frame.UnknownMetadata.key"));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chaotic_good_frame.UnknownMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chaotic_good_frame.UnknownMetadata.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaotic_good_frame.UnknownMetadata)
  return target;
}

size_t UnknownMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaotic_good_frame.UnknownMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnknownMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownMetadata::GetClassData() const { return &_class_data_; }

void UnknownMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnknownMetadata *>(to)->MergeFrom(
      static_cast<const UnknownMetadata &>(from));
}


void UnknownMetadata::MergeFrom(const UnknownMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaotic_good_frame.UnknownMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownMetadata::CopyFrom(const UnknownMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaotic_good_frame.UnknownMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownMetadata::IsInitialized() const {
  return true;
}

void UnknownMetadata::InternalSwap(UnknownMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chaotic_5fgood_5fframe_2eproto_getter, &descriptor_table_chaotic_5fgood_5fframe_2eproto_once,
      file_level_metadata_chaotic_5fgood_5fframe_2eproto[1]);
}

// ===================================================================

class ClientMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientMetadata>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_authority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClientMetadata::ClientMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unknown_metadata_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chaotic_good_frame.ClientMetadata)
}
ClientMetadata::ClientMetadata(const ClientMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unknown_metadata_(from.unknown_metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    authority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_authority()) {
    authority_.Set(from._internal_authority(), 
      GetArenaForAllocation());
  }
  timeout_ms_ = from.timeout_ms_;
  // @@protoc_insertion_point(copy_constructor:chaotic_good_frame.ClientMetadata)
}

inline void ClientMetadata::SharedCtor() {
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
authority_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  authority_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timeout_ms_ = uint64_t{0u};
}

ClientMetadata::~ClientMetadata() {
  // @@protoc_insertion_point(destructor:chaotic_good_frame.ClientMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.Destroy();
  authority_.Destroy();
}

void ClientMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:chaotic_good_frame.ClientMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unknown_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      authority_.ClearNonDefaultToEmpty();
    }
  }
  timeout_ms_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chaotic_good_frame.ClientMetadata.path"));
        } else
          goto handle_unusual;
        continue;
      // optional string authority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chaotic_good_frame.ClientMetadata.authority"));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timeout_ms(&has_bits);
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .chaotic_good_frame.UnknownMetadata unknown_metadata = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unknown_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chaotic_good_frame.ClientMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string path = 1;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chaotic_good_frame.ClientMetadata.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional string authority = 2;
  if (_internal_has_authority()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authority().data(), static_cast<int>(this->_internal_authority().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chaotic_good_frame.ClientMetadata.authority");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_authority(), target);
  }

  // optional uint64 timeout_ms = 3;
  if (_internal_has_timeout_ms()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timeout_ms(), target);
  }

  // repeated .chaotic_good_frame.UnknownMetadata unknown_metadata = 100;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unknown_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_unknown_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaotic_good_frame.ClientMetadata)
  return target;
}

size_t ClientMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaotic_good_frame.ClientMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chaotic_good_frame.UnknownMetadata unknown_metadata = 100;
  total_size += 2UL * this->_internal_unknown_metadata_size();
  for (const auto& msg : this->unknown_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string authority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_authority());
    }

    // optional uint64 timeout_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMetadata::GetClassData() const { return &_class_data_; }

void ClientMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientMetadata *>(to)->MergeFrom(
      static_cast<const ClientMetadata &>(from));
}


void ClientMetadata::MergeFrom(const ClientMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaotic_good_frame.ClientMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unknown_metadata_.MergeFrom(from.unknown_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_authority(from._internal_authority());
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ms_ = from.timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMetadata::CopyFrom(const ClientMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaotic_good_frame.ClientMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMetadata::IsInitialized() const {
  return true;
}

void ClientMetadata::InternalSwap(ClientMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unknown_metadata_.InternalSwap(&other->unknown_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &authority_, lhs_arena,
      &other->authority_, rhs_arena
  );
  swap(timeout_ms_, other->timeout_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chaotic_5fgood_5fframe_2eproto_getter, &descriptor_table_chaotic_5fgood_5fframe_2eproto_once,
      file_level_metadata_chaotic_5fgood_5fframe_2eproto[2]);
}

// ===================================================================

class ServerMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerMetadata>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServerMetadata::ServerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unknown_metadata_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chaotic_good_frame.ServerMetadata)
}
ServerMetadata::ServerMetadata(const ServerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unknown_metadata_(from.unknown_metadata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:chaotic_good_frame.ServerMetadata)
}

inline void ServerMetadata::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0u;
}

ServerMetadata::~ServerMetadata() {
  // @@protoc_insertion_point(destructor:chaotic_good_frame.ServerMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void ServerMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:chaotic_good_frame.ServerMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unknown_metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .chaotic_good_frame.UnknownMetadata unknown_metadata = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unknown_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chaotic_good_frame.ServerMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 status = 1;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // optional bytes message = 2;
  if (_internal_has_message()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .chaotic_good_frame.UnknownMetadata unknown_metadata = 100;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unknown_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_unknown_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaotic_good_frame.ServerMetadata)
  return target;
}

size_t ServerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaotic_good_frame.ServerMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chaotic_good_frame.UnknownMetadata unknown_metadata = 100;
  total_size += 2UL * this->_internal_unknown_metadata_size();
  for (const auto& msg : this->unknown_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional uint32 status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMetadata::GetClassData() const { return &_class_data_; }

void ServerMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerMetadata *>(to)->MergeFrom(
      static_cast<const ServerMetadata &>(from));
}


void ServerMetadata::MergeFrom(const ServerMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaotic_good_frame.ServerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unknown_metadata_.MergeFrom(from.unknown_metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMetadata::CopyFrom(const ServerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaotic_good_frame.ServerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMetadata::IsInitialized() const {
  return true;
}

void ServerMetadata::InternalSwap(ServerMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unknown_metadata_.InternalSwap(&other->unknown_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chaotic_5fgood_5fframe_2eproto_getter, &descriptor_table_chaotic_5fgood_5fframe_2eproto_once,
      file_level_metadata_chaotic_5fgood_5fframe_2eproto[3]);
}

// ===================================================================

class BeginMessage::_Internal {
 public:
};

BeginMessage::BeginMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chaotic_good_frame.BeginMessage)
}
BeginMessage::BeginMessage(const BeginMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:chaotic_good_frame.BeginMessage)
}

inline void BeginMessage::SharedCtor() {
length_ = uint64_t{0u};
}

BeginMessage::~BeginMessage() {
  // @@protoc_insertion_point(destructor:chaotic_good_frame.BeginMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BeginMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BeginMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BeginMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chaotic_good_frame.BeginMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  length_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeginMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chaotic_good_frame.BeginMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 length = 1;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chaotic_good_frame.BeginMessage)
  return target;
}

size_t BeginMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chaotic_good_frame.BeginMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 length = 1;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BeginMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginMessage::GetClassData() const { return &_class_data_; }

void BeginMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BeginMessage *>(to)->MergeFrom(
      static_cast<const BeginMessage &>(from));
}


void BeginMessage::MergeFrom(const BeginMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chaotic_good_frame.BeginMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeginMessage::CopyFrom(const BeginMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chaotic_good_frame.BeginMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginMessage::IsInitialized() const {
  return true;
}

void BeginMessage::InternalSwap(BeginMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeginMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chaotic_5fgood_5fframe_2eproto_getter, &descriptor_table_chaotic_5fgood_5fframe_2eproto_once,
      file_level_metadata_chaotic_5fgood_5fframe_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chaotic_good_frame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chaotic_good_frame::Settings*
Arena::CreateMaybeMessage< ::chaotic_good_frame::Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chaotic_good_frame::Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::chaotic_good_frame::UnknownMetadata*
Arena::CreateMaybeMessage< ::chaotic_good_frame::UnknownMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chaotic_good_frame::UnknownMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::chaotic_good_frame::ClientMetadata*
Arena::CreateMaybeMessage< ::chaotic_good_frame::ClientMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chaotic_good_frame::ClientMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::chaotic_good_frame::ServerMetadata*
Arena::CreateMaybeMessage< ::chaotic_good_frame::ServerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chaotic_good_frame::ServerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::chaotic_good_frame::BeginMessage*
Arena::CreateMaybeMessage< ::chaotic_good_frame::BeginMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chaotic_good_frame::BeginMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
